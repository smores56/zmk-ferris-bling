/*
* Copyright (c) 2020 The ZMK Contributors
*
* SPDX-License-Identifier: MIT
*/

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>

#define MAIN 0
#define SYM 1
#define NAV 2
#define WM 3

&mt {
    flavor = "tap-preferred";
    tapping_term_ms = <140>;
};

/ {
    behaviors {
        dot_exclam: dot_exclam {
            compatible = "zmk,behavior-mod-morph";            
            label = "DOT_EXCLAM";            
            #binding-cells = <0>;            
            bindings = <&mt RALT DOT>, <&kp EXCL>;            
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
    };

    combos {
        compatible = "zmk,combos";

        combo_esc {
            timeout-ms = <100>;
            key-positions = <21 22>;
            bindings = <&kp ESC>;
        };

        combo_tab {
            timeout-ms = <100>;
            key-positions = <22 23>;
            bindings = <&kp TAB>;
        };

        combo_minus {
            timeout-ms = <100>;
            key-positions = <26 27>;
            bindings = <&kp MINUS>;
        };

        combo_underscore {
            timeout-ms = <100>;
            key-positions = <26 28>;
            bindings = <&kp UNDERSCORE>;
        };

        combo_colon {
            timeout-ms = <100>;
            key-positions = <7 8>;
            bindings = <&kp COLON>;
        };

        combo_semicolon {
            timeout-ms = <100>;
            key-positions = <6 8>;
            bindings = <&kp SEMICOLON>;
        };

        combo_backslash {
            timeout-ms = <100>;
            key-positions = <27 28>;
            bindings = <&kp BSLH>;
        };

        combo_grave {
            timeout-ms = <100>;
            key-positions = <8 9>;
            bindings = <&kp GRAVE>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        MAIN_layer {
            bindings = <
                &kp Y       &kp C      &kp L       &kp M      &kp K          &kp Z     &kp F      &kp U          &kp COMMA   &kp APOS
                &kp I       &kp S      &lt WM R    &lt SYM T  &kp G          &kp P     &lt SYM N  &lt WM E       &kp A       &kp O
                &mt LSHFT Q &mt LALT V &mt LCTRL W &mt LGUI D &kp J          &kp B     &mt RGUI H &mt RCTRL FSLH &dot_exclam &mt RSHFT X
                                                   &kp ENTER  &lt NAV SPC    &sk RSHFT &kp BKSP 
            >;
        };

        SYM_layer {
            bindings = <
                &none     &kp N7 &kp N8 &kp N9  &kp STAR     &kp DLLR  &kp LBRC &kp RBRC &kp HASH  &none
                &kp AMPS  &kp N1 &kp N2 &kp N3  &kp EQUAL    &kp LT    &kp LPAR &kp RPAR &kp GT    &kp PIPE
                &kp CARET &kp N4 &kp N5 &kp N6  &kp PLUS     &kp TILDE &kp LBKT &kp RBKT &kp AT    &kp PRCNT
                                        &kp DOT &kp N0       &trans    &none 
            >;
        };

        NAV_layer {
            bindings = <
                &kp C_PREV &kp C_VOL_DN &kp C_VOL_UP &kp C_NEXT &kp C_PP           &none     &kp F7  &kp F8 &kp F9 &kp F10
                &kp LEFT   &kp DOWN     &kp UP       &kp RIGHT  &kp LC(TAB)        &kp PSCRN &kp F1  &kp F2 &kp F3 &kp F11
                &kp HOME   &kp PG_DN    &kp PG_UP    &kp END    &kp LS(LC(TAB))    &kp CAPS  &kp F4  &kp F5 &kp F6 &kp F12
                                                     &none      &none              &trans    &kp DEL
            >;
        };	

        WM_layer {
            bindings = <
                &none        &kp LG(R)    &kp LG(Q)  &kp LG(D)     &kp LG(V)      &kp LG(S) &kp LG(7) &kp LG(8) &kp LG(9) &none
                &kp LG(DOWN) &kp LG(DOWN) &kp LG(UP) &kp LG(UP)    &kp LG(F1)     &kp LG(E) &kp LG(1) &kp LG(2) &kp LG(3) &kp LG(0)
                &none        &kp LG(F)    &kp LG(O)  &kp LG(ENTER) &kp LG(H)      &kp LG(W) &kp LG(4) &kp LG(5) &kp LG(6) &none
                                                     &none         &kp LG(SPC)    &trans       &none
            >;
        };	
    };
};
